<?php
namespace {{$namespace}};
use {{$repoUse}};
use {{$storeFormRequestUseExpression}};
use App\Http\Requests\Settings\Config\UpdateRequest;
use App\Http\Controllers\Controller;
//use Illuminate\Http\Request;

class {{$name}} extends Controller
{
    //
    private ${{$repoInstance}} = null;

    function __construct({{$repoName}} ${{$repoInstance}}){
        $this->{{$repoInstance}} = ${{$repoInstance}};
    }

    function index(){
        $list = $this->{{$repoInstance}}->fetch(request()->all())->get();
        return inertia()->render("{{$svelteIndex}}",[
            "list"=>$list
        ]);
    }

    function create(){
        return inertia()->render("v2/Settings/Config/Create");
    }

    function edit($id){
        $data = $this->{{$repoInstance}}->fetchById($id);
        return inertia()->render("v2/Settings/Config/Edit",[
            "data"=>$data
        ]);
    }

    function show($id){
        $data = $this->{{$repoInstance}}->fetchById($id);
        return inertia()->render("v2/Settings/Config/Show",[
            "data"=>$data
        ]);
    }

    function store(StoreRequest $request){
      $record = $this->{{$repoInstance}}->create($request->validated());
      return $this->respondWithSuccess("New record added");
    }

    function update($id,UpdateRequest $updateRequest){
        $record = $this->{{$repoInstance}}->update($id,$updateRequest->validated());
        return $this->respondWithSuccess("Record updated");
    }

    function destroy($id){
      $record = $this->{{$repoInstance}}->remove($id);
      return $this->respondWithSuccess("Record removed");
    }
}
